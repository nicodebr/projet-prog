#include<stdio.h>
#include<string.h>
#include<math.h>
#include<stdlib.h>

#pragma warning(disable : 4996)

struct ball {
    int x;
    int y;
    int score;
};



int main(int argc, char* argv[]) {

    FILE* Pixmap;
    Pixmap = fopen("Pixmap(T1-218).bin", "rb");
    if (Pixmap == NULL) {
        printf("Erreur : le fichier Pixmap ne peut pas s'ouvrir correctement\n");
        return -1;
    }

    unsigned int width_1[2] = { 0 };
    size_t size = sizeof(unsigned int);
    size_t nmemb = 2;
    size_t read_elements = fread(width_1, size, nmemb, Pixmap);
    unsigned int height = width_1[1];
    unsigned int width = width_1[0];


    // point 2 lecture du fichier
    // Lecture de la largeur et de la hauteur de l'image

    // Vérification des bornes de la largeur et de la hauteur
    if (width <= 0 || height <= 0) {
        printf("Erreur : les dimensions de l'image sont incorrectes\n");
        fclose(Pixmap);
        return -1;
    }

    // Lire les couleurs des boules et les coordonnées du billard à partir des arguments de la ligne de commande
    int red_min, red_max, yellow_min, yellow_max, white_min, white_max, table_min, table_max;
    int table_x, table_y;

    if (argc != 30) {
        printf("Erreur : Nombre incorrect d'arguments de la ligne de commande.\n");
        return -1;
    }

    const char* filename = argv[0];
    const unsigned int BillardBox_Lmin = atoi(argv[1]);
    const unsigned int BillardBox_Lmax = atoi(argv[2]);
    const unsigned int BillardBox_Cmin = atoi(argv[3]);
    const unsigned int BillardBox_Cmax = atoi(argv[4]);
    const unsigned int RedBall_Rmin = atoi(argv[5]);
    const unsigned int RedBall_Rmax = atoi(argv[6]);
    const unsigned int RedBall_Gmin = atoi(argv[7]);
    const unsigned int RedBall_Gmax = atoi(argv[8]);
    const unsigned int RedBall_Bmin = atoi(argv[9]);
    const unsigned int RedBall_Bmax = atoi(argv[10]);
    const unsigned int YellowBall_Rmin = atoi(argv[11]);
    const unsigned int YellowBall_Rmax = atoi(argv[12]);
    const unsigned int YellowBall_Gmin = atoi(argv[13]);
    const unsigned int YellowBall_Gmax = atoi(argv[14]);
    const unsigned int YellowBall_Bmin = atoi(argv[15]);
    const unsigned int YellowBall_Bmax = atoi(argv[16]);
    const unsigned int WhiteBall_Rmin = atoi(argv[17]);
    const unsigned int WhiteBall_Rmax = atoi(argv[18]);
    const unsigned int WhiteBall_Gmin = atoi(argv[19]);
    const unsigned int WhiteBall_Gmax = atoi(argv[20]);
    const unsigned int WhiteBall_Bmin = atoi(argv[21]);
    const unsigned int WhiteBall_Bmax = atoi(argv[22]);
    const unsigned int BG_Rmin = atoi(argv[23]);
    const unsigned int BG_Rmax = atoi(argv[24]);
    const unsigned int BG_Gmin = atoi(argv[25]);
    const unsigned int BG_Gmax = atoi(argv[26]);
    const unsigned int BG_Bmin = atoi(argv[27]);
    const unsigned int BG_Bmax = atoi(argv[28]);
    const unsigned int BallDiameter = atoi(argv[29]);

    // Valider les bornes des couleurs et des coordonnées du billard


    // Point 3 lire les pixels et stocker dans un tableau dynamique
    // Allocation dynamique du tableau de pixels

    
    if (read_elements != nmemb) {
        fprintf(stderr, "Erreur de lecture. Le nombre d'éléments lus (%zu) est différent de celui attendu (%zu).\n", read_elements, nmemb);
        return -1;
    }
    else if (width < 100 || height < 100 || width > 1000 || height>1000) {
        fprintf(stderr, "La largueur ou la hauteur est en dehors des bornes raisonnables");
        return -1;
    }
    else {
        pprintf("Largeur : %u\n", width);
        printf("Hauteur : %u\n", height);
    }

    //Création du malloc
    unsigned int* pixels = NULL;
    unsigned int tab = width * height;
    



    // Allouer de l'espace mémoire pour stocker les pixels de l'image
    pixels = malloc(tab * size);


    if (pixels == NULL) {
        printf("Erreur : impossible d'allouer suffisamment de mémoire\n");
        fclose(Pixmap);
        return -1;
    }

    // Lecture de tous les pixels de l'image
    if (fread(pixels, sizeof(unsigned int), tab, Pixmap) != tab) {
        printf("Erreur : impossible de lire tous les pixels de l'image\n");
        fclose(Pixmap);
        free(pixels);
        return -1;
    }

    //initialisation des struct pour chaque boules
    struct ball ball_red = { -1, -1, 0 };
    struct ball ball_white = { -1, -1, 0 };
    struct ball ball_yellow = { -1, -1, 0 };
    int new_score;

    for (int i = 6; i < height - 6; i++) {
        for (int j = 6; j < width - 6; j++) {
            unsigned int p = pixels[i * height + j]; //pixel au centre du carré 13*13
            unsigned int r = (p >> 16) & 0xFF; // composante rouge
            unsigned int g = (p >> 8) & 0xFF;  // composante verte
            unsigned int b = p & 0xFF;         // composante bleue
            //test si le pixel central est rouge
            if (r >= RedBall_Rmin && r <= RedBall_Rmax && g >= RedBall_Gmin && g <= RedBall_Gmax && b >= RedBall_Bmin && b <= RedBall_Bmax) {
                new_score = 0;
                for (int m = i - 6; m < i + 6; m++) {
                    for (int n = j - 6; n < j + 6; n++) {
                        unsigned int p1 = pixels[m * height + n];
                        unsigned int r1 = (p1 >> 16) & 0xFF; // composante rouge
                        unsigned int g1 = (p1 >> 8) & 0xFF;  // composante verte
                        unsigned int b1 = p1 & 0xFF;         // composante bleue
                        if (r1 >= RedBall_Rmin && r <= RedBall_Rmax &&
                            g1 >= RedBall_Gmin && g <= RedBall_Gmax &&
                            b1 >= RedBall_Bmin && b <= RedBall_Bmax) {
                            new_score++;
                        }
                    }
                }
                if (new_score > ball_red.score) {
                    ball_red.x = j-6;
                    ball_red.y = i-6;
                    ball_red.score = new_score;
                }
            }
            //test si le pixel central est blanc
            if (r >= WhiteBall_Rmin && r <= WhiteBall_Rmax && g >= WhiteBall_Gmin && g <= WhiteBall_Gmax && b >= WhiteBall_Bmin && b <= WhiteBall_Bmax) {
                new_score = 0;
                for (int m = i - 6; m < i + 6; m++) {
                    for (int n = j - 6; n < j + 6; n++) {
                        unsigned int p1 = pixels[m * height + n];
                        unsigned int r1 = (p1 >> 16) & 0xFF; // composante rouge
                        unsigned int g1 = (p1 >> 8) & 0xFF;  // composante verte
                        unsigned int b1 = p1 & 0xFF;         // composante bleue
                        if (r1 >= WhiteBall_Rmin && r1 <= WhiteBall_Rmax &&
                            g1 >= WhiteBall_Gmin && g1 <= WhiteBall_Gmax &&
                            b1 >= WhiteBall_Bmin && b1 <= WhiteBall_Bmax) {
                            new_score++;
                        }
                    }
                }
                if (new_score > ball_white.score) {
                    ball_white.x = j-6;
                    ball_white.y = i-6;
                    ball_white.score = new_score;
                }
            }
            //test si le pixel central est jaune
            if (r >= YellowBall_Rmin && r <= YellowBall_Rmax && g >= YellowBall_Gmin && g <= YellowBall_Gmax && b >= YellowBall_Bmin && b <= YellowBall_Bmax) {
                new_score = 0;
                for (int m = i - 6; m < i + 6; m++) {
                    for (int n = j - 6; n < j + 6; n++) {
                        unsigned int p1 = pixels[m * height + n];
                        unsigned int r1 = (p1 >> 16) & 0xFF; // composante rouge
                        unsigned int g1 = (p1 >> 8) & 0xFF;  // composante verte
                        unsigned int b1 = p1 & 0xFF;         // composante bleue
                        if (r1 >= YellowBall_Rmin && r1 <= YellowBall_Rmax &&
                            g1 >= YellowBall_Gmin && g1 <= YellowBall_Gmax &&
                            b1 >= YellowBall_Bmin && b1 <= YellowBall_Bmax) {
                            new_score++;
                        }
                    }
                }
                if (new_score > ball_yellow.score) {
                    ball_yellow.x = j-6;
                    ball_yellow.y = i-6;
                    ball_yellow.score = new_score;
                }
            }


        }
    }

    // ouvrir le fichier en mode écriture
    FILE* fichier_pos;
    errno_t err;
    err = fopen_s(&fichier_pos, "Pos.txt", "w");
    if (err != 0) {
        fprintf(stderr, "Erreur lors de la creation du fichier pos.txt");
    }
    else {
        // écrire les informations dans le fichier
        fprintf(fichier_pos, "Red: %d, %d, %d\n", ball_red.x, ball_red.y, ball_red.score);
        fprintf(fichier_pos, "Yellow: %d, %d, %d\n", ball_yellow.x, ball_yellow.y, ball_yellow.score);
        fprintf(fichier_pos, "White: %d, %d, %d\n", ball_white.x, ball_white.y, ball_white.score);
    }
    // fermer le fichier
    fclose(fichier_pos);


    // Fermeture du fichier
    fclose(Pixmap);

    // Libération de la mémoire allouée pour le tableau de pixels
    free(pixels);

    return 0;
}
